{"version":3,"sources":["../../../src/api/controllers/AppController.js"],"names":["AppController","Apps","req","resp","console","log","json","msg","msg1","msg2","it1","it2","App","send","Create","body","appJson","payload","app_name","generatorRepository","GenerateApp","error","templatePath","sandboxPath","Update"],"mappings":";;;;;;AAAA;;;;;;;;IAEMA,a;;;SACFC,I,GAAO,UAACC,GAAD,EAAMC,IAAN,EAAe;AAClBC,gBAAQC,GAAR,CAAY,qBAAZ;AACAF,aAAKG,IAAL,CAAU,EAACC,KAAK,uBAAN,EAA+BC,MAAM,4BAArC,EAAmEC,MAAM,EAAEC,KAAK,wBAAP,EAAiCC,KAAK,0BAAtC,EAAzE,EAAV;AACH,K;;SAEDC,G,GAAM,UAACV,GAAD,EAAMC,IAAN,EAAe;AACjBA,aAAKU,IAAL,CAAU,uBAAV;AACH,K;;SAEDC,M,GAAS,UAACZ,GAAD,EAAMC,IAAN,EAAe;AACpBC,gBAAQC,GAAR,CAAY,UAAZ,EAAwBH,IAAIa,IAA5B;AACA,YAAIC,UAAUd,IAAIa,IAAJ,CAASE,OAAvB;AACAb,gBAAQC,GAAR,CAAY,SAAZ,EAAuBW,OAAvB;AACAZ,gBAAQC,GAAR,CAAY,UAAZ,EAAwBW,QAAQE,QAAhC;AACAC,sCAAoBC,WAApB,CAAgCJ,OAAhC,EAAyC,UAACK,KAAD,EAAQC,YAAR,EAAsBC,WAAtB,EAAsC;AAC3E,gBAAGF,KAAH,EAAU;AACNjB,wBAAQiB,KAAR,mCAA8CC,YAA9C,oBAAyEC,WAAzE;AACApB,qBAAKG,IAAL,CAAU,EAAEC,KAAK,qCAAP;AACEc,2BAAOA,KADT,EAAV;AAEH,aAJD,MAKI;AACAjB,wBAAQC,GAAR,sCAA+CkB,WAA/C;AACApB,qBAAKG,IAAL,CAAU,EAAEC,KAAK,4BAAP;AACEgB,iCAAaA,WADf;AAEED,kCAAcA,YAFhB,EAAV;AAIH;AACJ,SAbD;AAcH,K;;SAEDE,M,GAAS,UAACtB,GAAD,EAAMC,IAAN,EAAe;AACpBA,aAAKU,IAAL,CAAU,mBAAV;AACH,K;;;kBAGU,IAAIb,aAAJ,E","file":"AppController.js","sourcesContent":["import generatorRepository from \"../../generatorRepository\";\r\n\r\nclass AppController {\r\n    Apps = (req, resp) => {\r\n        console.log('this apps is called');\r\n        resp.json({msg: 'get all apps called 2', msg1: 'val1 got called from lorem', msg2: { it1: 'property it1 has value', it2: 'prop it2 is a child prop'    }        });\r\n    }\r\n\r\n    App = (req, resp) => {\r\n        resp.send('get single app called');\r\n    }\r\n\r\n    Create = (req, resp) => {\r\n        console.log('req.body', req.body);\r\n        let appJson = req.body.payload;\r\n        console.log('payload', appJson);\r\n        console.log('app_name', appJson.app_name);\r\n        generatorRepository.GenerateApp(appJson, (error, templatePath, sandboxPath) => {\r\n            if(error) {\r\n                console.error(`error while copying template ${templatePath} to sandbox ${sandboxPath}`)\r\n                resp.json({ msg: 'Error occurred while generating app',\r\n                            error: error});\r\n            }\r\n            else{\r\n                console.log(`Template successfully copied at ${sandboxPath}`);  \r\n                resp.json({ msg: 'App generated successfully',\r\n                            sandboxPath: sandboxPath,\r\n                            templatePath: templatePath });\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        resp.send('Update app called');\r\n    }\r\n}\r\n\r\nexport default new AppController();"]}